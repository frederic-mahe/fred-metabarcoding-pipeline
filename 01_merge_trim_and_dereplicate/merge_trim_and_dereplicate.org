* Merge, trim and dereplicate pairs of fastq files

Initial situation: fastq files are already demultiplexed, we have a
pair of R1 and R2 files for each sample.

To adapt it to another dataset, you need to change primer sequences in
the initial block of variables, and the raw fastq file search pattern
and sample file naming if your raw fastq files follow another naming
rule (in the final =while= loop):

#+BEGIN_SRC sh
  #!/bin/bash
  cd "${PWD}" || exit

  export LC_ALL=C

  ## ------------------------------------------------------------ define variables
  declare -r PRIMER_F="${1}"
  declare -r PRIMER_R="${2}"
  declare -ri THREADS="${3:-4}"
  declare -r FASTQ_NAME_PATTERN="${4:-*_R1_001.fastq.gz}"
  declare -r CUTADAPT_OPTIONS="--minimum-length 32 --cores=${THREADS} --discard-untrimmed"
  declare -r CUTADAPT="$(which cutadapt) ${CUTADAPT_OPTIONS}"  # cutadapt 4.1 or more recent
  declare -r SWARM="$(which swarm)"  # swarm 3.0 or more recent
  declare -r VSEARCH="$(which vsearch) --quiet"  # vsearch 2.21.1 or more recent
  declare -ri ENCODING=33
  declare -r MIN_F=$(( ${#PRIMER_F} * 2 / 3 ))  # match is >= 2/3 of primer length
  declare -r MIN_R=$(( ${#PRIMER_R} * 2 / 3 ))
  declare -r FIFOS=$(echo fifo_{merged,trimmed}_fastq fifo_filtered_fasta{,_bis})
  declare -i TICKER=0

  ## ------------------------------------------------------------------- functions
  revcomp() {
      # reverse-complement a DNA/RNA IUPAC string
      [[ -z "${1}" ]] && { echo "error: empty string" ; exit 1 ; }
      local -r nucleotides="acgturykmbdhvswACGTURYKMBDHVSW"
      local -r complements="tgcaayrmkvhdbswTGCAAYRMKVHDBSW"
      tr "${nucleotides}" "${complements}" <<< "${1}" | rev
  }

  get_reverse_name() {
      ## common patterns
      # - extension does not matter (fastq or fq, gz or bz2 or none)
      # - `_L00[1-9]_R{1,2}_001.fastq.gz` (MiSeq)
      # - `_L00[1-9]_R{1,2}.fastq.gz`
      # - `_[1-9]_{1,2}_.*.fastq.gz`
      # - `_[1-9]_{1,2}.fastq.gz`
      # - `_R{1,2}.fastq.gz`
      # - `_{1,2}.fastq.gz`
      FORWARD_FILE="${1}"
      case "${FORWARD_FILE}" in
          ,*_L00[1-9]_R1_00[1-9]*) # last segment should always be '001'
              sed -r 's/_(L00[1-9])_R1_(00[1-9])([.](fastq|fq)([.](gz|bz2))?)$/_\1_R2_\2\3/' <<< "${FORWARD_FILE}"
              ;;
          ,*_L00[1-9]_*_R1*)
              sed -r 's/_(L00[1-9]_.*)_R1([.](fastq|fq)([.](gz|bz2))?)$/_\1_R2\2/' <<< "${FORWARD_FILE}"
              ;;
          ,*_L00[1-9]_R1*)
              sed -r 's/_(L00[1-9])_R1([.](fastq|fq)([.](gz|bz2))?)$/_\1_R2\2/' <<< "${FORWARD_FILE}"
              ;;
          ,*[._][1-9]_1_*)
              sed -r 's/([._][1-9])_1_([^/]*[.](fastq|fq)([.](gz|bz2))?)$/\1_2_\2/' <<< "${FORWARD_FILE}"
              ;;
          ,*[._][1-9]_1[.]*)
              sed -r 's/([._][1-9])_1[.]((fastq|fq)([.](gz|bz2))?)$/\1_2.\2/' <<< "${FORWARD_FILE}"
              ;;
          ,*[._]R1*)
              sed -r 's/([._])R1([.](fastq|fq)([.](gz|bz2))?)$/\1R2\2/' <<< "${FORWARD_FILE}"
              ;;
          ,*[._]1*)
              sed -r 's/([._])1([.](fastq|fq)([.](gz|bz2))?)$/\12\2/' <<< "${FORWARD_FILE}"
              ;;
          ,*)
              echo "unknown"
              ;;
      esac
  }

  get_sample_name() {
      ## common patterns
      # - extension does not matter (fastq or fq, gz or bz2 or none)
      # - `_L00[1-9]_R{1,2}_001.fastq.gz` (MiSeq)
      # - `_L00[1-9]_R{1,2}.fastq.gz`
      # - `_[1-9]_{1,2}_.*.fastq.gz`
      # - `_[1-9]_{1,2}.fastq.gz`
      # - `_R{1,2}.fastq.gz`
      # - `_{1,2}.fastq.gz`
      FORWARD_FILE="${1}"
      case "${FORWARD_FILE}" in
          ,*_L00[1-9]_R1_00[1-9]*) # last segment should always be '001'
              echo "${FORWARD_FILE/_L00[1-9]*/}"
              ;;
          ,*_L00[1-9]_*_R1*)
              echo "${FORWARD_FILE/_L00[1-9]*/}"
              ;;
          ,*_L00[1-9]_R1*)
              echo "${FORWARD_FILE/_L00[1-9]*/}"
              ;;
          ,*[._][1-9]_1_*)
              echo "${FORWARD_FILE/[._][1-9]_1_*/}"
              ;;
          ,*[._][1-9]_1[.]*)
              echo "${FORWARD_FILE/[._][1-9]_1*/}"
              ;;
          ,*[._]R1*)
              echo "${FORWARD_FILE/[._]R1*/}"
              ;;
          ,*[._]1*)
              echo "${FORWARD_FILE/[._]1*/}"
              ;;
          ,*)
              echo "unknown"
              ;;
      esac
  }

  merge_fastq_pair() {
      ${VSEARCH} \
          --threads "${THREADS}" \
          --fastq_mergepairs "${FORWARD}" \
          --reverse "${REVERSE}" \
          --fastq_ascii "${ENCODING}" \
          --fastq_allowmergestagger \
          --fastqout fifo_merged_fastq 2> "${SAMPLE}.log" &
  }

  trim_primers() {
      # search forward primer in both normal and revcomp: now all reads
      # are in the same orientation. Matching leftmost is the default.
      ${CUTADAPT} \
          --revcomp \
          --front "${PRIMER_F};rightmost" \
          --overlap "${MIN_F}" fifo_merged_fastq 2>> "${SAMPLE}.log" | \
          ${CUTADAPT} \
              --adapter "${ANTI_PRIMER_R}" \
              --overlap "${MIN_R}" \
              --max-n 0 - > fifo_trimmed_fastq 2>> "${SAMPLE}.log" &
  }

  convert_fastq_to_fasta() {
      # use SHA1 values as sequence names,
      # compute expected error values (ee)
      ${VSEARCH} \
          --fastq_filter fifo_trimmed_fastq \
          --relabel_sha1 \
          --fastq_ascii "${ENCODING}" \
          --eeout \
          --fasta_width 0 \
          --fastaout - 2>> "${SAMPLE}.log" | \
          tee fifo_filtered_fasta_bis > fifo_filtered_fasta &
  }

  extract_expected_error_values() {
      # extract ee for future quality filtering (keep the lowest
      # observed expected error value for each unique sequence)
      local -ri length_of_sequence_IDs=40
      paste - - < fifo_filtered_fasta_bis | \
          awk 'BEGIN {FS = "[>;=\t]"} {print $2, $4, length($NF)}' | \
          sort --key=3,3n --key=1,1d --key=2,2n | \
          uniq --check-chars=${length_of_sequence_IDs} > "${SAMPLE}.qual" &
  }

  dereplicate_fasta() {
      # dereplicate and discard expected error values (ee)
      ${VSEARCH} \
          --derep_fulllength fifo_filtered_fasta \
          --sizeout \
          --fasta_width 0 \
          --xee \
          --output "${SAMPLE}.fas" 2>> "${SAMPLE}.log"
  }

  list_local_clusters() {
      # retain only clusters with more than 2 reads
      # (do not use the fastidious option here)
      ${SWARM} \
          --threads "${THREADS}" \
          --differences 1 \
          --usearch-abundance \
          --log /dev/null \
          --output-file /dev/null \
          --statistics-file - \
          "${SAMPLE}.fas" | \
          awk 'BEGIN {FS = OFS = "\t"} $2 > 2' > "${SAMPLE}.stats"
  }

  ## ------------------------------------------------------------------------ main
  declare -r ANTI_PRIMER_R="$(revcomp "${PRIMER_R}")"

  # from raw fastq files to ready-to-use sample files
  find . -name "${FASTQ_NAME_PATTERN}" -type f -print0 | \
      while IFS= read -r -d '' FORWARD ; do
          TICKER=$(( TICKER + 1 ))
          echo -e "${TICKER}\t${FORWARD}"
          REVERSE="$(get_reverse_name "${FORWARD}")"
          SAMPLE="$(get_sample_name "${FORWARD}")"

          # clean (remove older files, if any)
          rm --force "${SAMPLE}".{fas,qual,log,stats} ${FIFOS}
          mkfifo ${FIFOS}

          merge_fastq_pair
          trim_primers
          convert_fastq_to_fasta
          extract_expected_error_values
          dereplicate_fasta
          list_local_clusters

          # make sure fifos are done and not reused
          wait && rm ${FIFOS}
          unset FORWARD REVERSE SAMPLE
      done

  exit 0
#+END_SRC

The code above uses named pipes (=fifo=) to avoid writing intermediate
results to mass storage. The goal is to speed up processing, and to
make the code more modular and clearer. On the other hand, fifos are
tricky to use, as you must remember to launch producers and consumers
in the backgroup before running the last consumer.

Under certain very rare and elusive multithreading conditions,
=vsearch --fastq_mergepairs= can hang, interrupting the data flow and
the pipeline. Until that bug can be reproduced and fixed, be cautious.

** TODO update pipeline with vsearch 2.23

Now, sequence length are header attributes =extract_expected_error_values()= can be simplified.

** DONE deduce fastq name pattern
CLOSED: [2025-05-28 mer. 10:19]

The goal is to eliminate the need for manual edits. Observed patterns
are:

- =_L001_R1_001.fastq=,
- =_L001_R1_002.fastq=,
- =_L001_R1.fastq=,
- =_R1.fastq=,
- =_n_1.fastq= (with =n= a value ranging from 1 to 9),
- =_1.fastq=,
- =.1.fastq=,
- =forward.fastq= (and =reverse.fastq=)

Compressed (=.gz=, =.bz=) or not. The most current is
=_L001_R1_001.fastq= as produced by Illumina MiSeq single-lane
sequencers.

#+begin_src sh
  ## ----------------------------------------------------------------------- tests

  test_get_reverse_name() {
      echo -ne "${1}\t${2}\t"
      get_reverse_name "${1}" | \
          grep -qw "${2}" && \
          echo "ok" || \
              echo "fail!"
  }

  ## test extensions
  test_get_reverse_name "A_L001_R1_001.fastq" "A_L001_R2_001.fastq"
  test_get_reverse_name "A_L001_R1_001.fastq.gz" "A_L001_R2_001.fastq.gz"
  test_get_reverse_name "A_L001_R1_001.fastq.bz2" "A_L001_R2_001.fastq.bz2"
  test_get_reverse_name "A_L001_R1_001.fq" "A_L001_R2_001.fq"
  test_get_reverse_name "A_L001_R1_001.fq.gz" "A_L001_R2_001.fq.gz"
  test_get_reverse_name "A_L001_R1_001.fq.bz2" "A_L001_R2_001.fq.bz2"

  ## test R1-R2 patterns
  test_get_reverse_name "A_L001_R1_001.fastq.gz" "A_L001_R2_001.fastq.gz"
  test_get_reverse_name "A_L001_R1_002.fastq.gz" "A_L001_R2_002.fastq.gz"
  test_get_reverse_name "A_L009_R1_001.fastq.gz" "A_L009_R2_001.fastq.gz"
  test_get_reverse_name "A_L001_junk_R1.fastq.gz" "A_L001_junk_R2.fastq.gz"
  test_get_reverse_name "A_L009_junk_R1.fastq.gz" "A_L009_junk_R2.fastq.gz"
  test_get_reverse_name "A_L001_R1.fastq.gz" "A_L001_R2.fastq.gz"
  test_get_reverse_name "A_L009_R1.fastq.gz" "A_L009_R2.fastq.gz"
  test_get_reverse_name "A_1_1_junk.fastq.gz" "A_1_2_junk.fastq.gz"
  test_get_reverse_name "A_9_1_junk.fastq.gz" "A_9_2_junk.fastq.gz"
  test_get_reverse_name "A.1_1_junk.fastq.gz" "A.1_2_junk.fastq.gz"
  test_get_reverse_name "A_1_1.fastq.gz" "A_1_2.fastq.gz"
  test_get_reverse_name "A_9_1.fastq.gz" "A_9_2.fastq.gz"
  test_get_reverse_name "A.1_1.fastq.gz" "A.1_2.fastq.gz"
  test_get_reverse_name "A_R1.fastq.gz" "A_R2.fastq.gz"
  test_get_reverse_name "A.R1.fastq.gz" "A.R2.fastq.gz"
  test_get_reverse_name "A_R3.fastq.gz" "unknown"


  test_get_sample_name() {
      echo -ne "${1}\t${2}\t"
      get_sample_name "${1}" | \
          grep -qw "${2}" && \
          echo "ok" || \
              echo "fail!"
  }

  test_get_sample_name "A_L001_R1_001.fastq.gz" "A"
  test_get_sample_name "A_L009_R1_001.fastq.gz" "A"
  test_get_sample_name "A_L001_junk_R1.fastq.gz" "A"
  test_get_sample_name "A_L009_junk_R1.fastq.gz" "A"
  test_get_sample_name "A_L001_R1.fastq.gz" "A"
  test_get_sample_name "A_L009_R1.fastq.gz" "A"
  test_get_sample_name "A_1_1_junk.fastq.gz" "A"
  test_get_sample_name "A_9_1_junk.fastq.gz" "A"
  test_get_sample_name "A_1_1.fastq.gz" "A"
  test_get_sample_name "A_9_1.fastq.gz" "A"
  test_get_sample_name "A_R1.fastq.gz" "A"
  test_get_sample_name "A.R1.fastq.gz" "A"
  test_get_sample_name "A_1.fastq.gz" "A"
  test_get_sample_name "A.1.fastq.gz" "A"
  test_get_sample_name "A_L001_R1_002.fastq.gz" "A"
  test_get_sample_name "R1_L001_R1_001.fastq.gz" "R1"  # R1 pattern in basename!
  test_get_sample_name "A_R1_L001_R1_001.fastq.gz" "A_R1"  # R1 pattern in basename!
  test_get_sample_name "A_R3.fastq.gz" "unknown"
  test_get_sample_name "_L001_R1_001.fastq.gz" ""  # empty file name!
#+end_src

** TODO add tests for executable, parameters and values provided by users
